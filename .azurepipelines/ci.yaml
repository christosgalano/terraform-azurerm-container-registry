# File: ci.yaml
#
# Description:
# This pipeline is designed to perform continuous integration for a Terraform configuration.
#
# The pipeline consists of two jobs:
# - scan: This job scans the Terraform codebase for formatting, linting, quality, and security issues.
# - test: This job runs the Terraform test command.
#

parameters:
  - name: root_module_directory
    displayName: Terraform Root Module Directory
    type: string

jobs:
  - job: terraform_scan
    displayName: Terraform Scan
    steps:
      - template: ../tools/install-tools.yaml
        parameters:
          tools:
            - tflint
            - trivy
            - checkov
            - terraform

      - bash: terraform init -backend=false -input=false
        displayName: Terraform init
        workingDirectory: ${{ parameters.root_module_directory }}

      - bash: terraform fmt -check -no-color
        displayName: Terraform format check
        workingDirectory: ${{ parameters.root_module_directory }}

      - bash: terraform validate -no-color
        displayName: Terraform validate
        workingDirectory: ${{ parameters.root_module_directory }}

      - template: ../tools/tflint.yaml
        parameters:
          working_directory: ${{ parameters.root_module_directory }}
          report_file: tflint_junit.xml
          publish_results: 'false'
          no_fail: 'true'

      - template: ../tools/trivy.yaml
        parameters:
          working_directory: ${{ parameters.root_module_directory }}
          report_file: trivy_junit.xml
          publish_results: 'false'
          no_fail: 'true'

      - template: ../tools/checkov.yaml
        parameters:
          working_directory: ${{ parameters.root_module_directory }}
          report_file: checkov_junit.xml
          framework: terraform
          publish_results: 'false'
          no_fail: 'true'

      - bash: |
          if [[ "${{ parameters.root_module_directory }}" == "." ]]; then
            echo "##vso[task.setvariable variable=testResultsFiles;]*_junit.xml"
          else
            echo "##vso[task.setvariable variable=testResultsFiles;]${{ parameters.root_module_directory }}/*_junit.xml"
          fi
        displayName: Set testResultsFiles variable

      - task: PublishTestResults@2
        condition: succeededOrFailed()
        displayName: Publish scan results
        inputs:
          testResultsFormat: JUnit
          testResultsFiles: $(testResultsFiles)
          mergeTestResults: true
          testRunTitle: Terraform Scan Results
          failTaskOnFailedTests: true
          publishRunAttachments: true

  - job: terraform_test
    displayName: Terraform Test
    dependsOn: terraform_scan
    steps:
      - template: ../tools/install-tools.yaml@templates
        parameters:
          tools:
            - terraform

      - bash: terraform init -backend=false -input=false
        displayName: Terraform init
        workingDirectory: ${{ parameters.root_module_directory }}

      - bash: terraform test
        displayName: Terraform test
        workingDirectory: ${{ parameters.root_module_directory }}
